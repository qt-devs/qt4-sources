/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(DATABASE)

#include "JSSQLError.h"

#include "KURL.h"
#include "SQLError.h"
#include <runtime/JSNumberCell.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSQLError);

/* Hash table */

static const HashTableValue JSSQLErrorTableValues[3] =
{
    { "code", DontDelete|ReadOnly, (intptr_t)jsSQLErrorCode, (intptr_t)0 },
    { "message", DontDelete|ReadOnly, (intptr_t)jsSQLErrorMessage, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSSQLErrorTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 3, JSSQLErrorTableValues, 0 };
#else
    { 4, 3, JSSQLErrorTableValues, 0 };
#endif

/* Hash table for prototype */

static const HashTableValue JSSQLErrorPrototypeTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static JSC_CONST_HASHTABLE HashTable JSSQLErrorPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSSQLErrorPrototypeTableValues, 0 };
#else
    { 1, 0, JSSQLErrorPrototypeTableValues, 0 };
#endif

const ClassInfo JSSQLErrorPrototype::s_info = { "SQLErrorPrototype", 0, &JSSQLErrorPrototypeTable, 0 };

JSObject* JSSQLErrorPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSQLError>(exec, globalObject);
}

const ClassInfo JSSQLError::s_info = { "SQLError", 0, &JSSQLErrorTable, 0 };

JSSQLError::JSSQLError(NonNullPassRefPtr<Structure> structure, JSDOMGlobalObject* globalObject, PassRefPtr<SQLError> impl)
    : DOMObjectWithGlobalPointer(structure, globalObject)
    , m_impl(impl)
{
}

JSSQLError::~JSSQLError()
{
    forgetDOMObject(this, impl());
}

JSObject* JSSQLError::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSSQLErrorPrototype(JSSQLErrorPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSSQLError::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSQLError, Base>(exec, &JSSQLErrorTable, this, propertyName, slot);
}

bool JSSQLError::getOwnPropertyDescriptor(ExecState* exec, const Identifier& propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSQLError, Base>(exec, &JSSQLErrorTable, this, propertyName, descriptor);
}

JSValue jsSQLErrorCode(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSSQLError* castedThis = static_cast<JSSQLError*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    SQLError* imp = static_cast<SQLError*>(castedThis->impl());
    return jsNumber(exec, imp->code());
}

JSValue jsSQLErrorMessage(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    JSSQLError* castedThis = static_cast<JSSQLError*>(asObject(slot.slotBase()));
    UNUSED_PARAM(exec);
    SQLError* imp = static_cast<SQLError*>(castedThis->impl());
    return jsString(exec, imp->message());
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, SQLError* object)
{
    return getDOMObjectWrapper<JSSQLError>(exec, globalObject, object);
}
SQLError* toSQLError(JSC::JSValue value)
{
    return value.inherits(&JSSQLError::s_info) ? static_cast<JSSQLError*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(DATABASE)
